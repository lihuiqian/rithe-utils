import Comparator from "../base/Comparator";
declare function empty<T>(): T[];
declare function from<T>(iterable: Iterable<T>): T[];
declare function range(start: number, count: number, step?: number): number[];
declare function repeat<T>(value: T, count: number): T[];
declare function concat<T>(...arrs: T[][]): T[];
declare function zip<T>(...arrs: T[][]): T[][];
declare function union<T>(arr1: T[], arr2: T[]): T[];
declare function intersection<T>(arr1: T[], arr2: T[]): T[];
declare function difference<T>(arr1: T[], arr2: T[]): T[];
declare function symmetricDifference<T>(arr1: T[], arr2: T[]): T[];
declare function map<T, R>(arr: T[], project: (value: T, index: number) => R): R[];
declare function pairwise<T>(arr: T[]): [T, T][];
declare function scan<T>(arr: T[], accumulator: (acc: T, value: T, index: number) => T, initial?: T): T[];
declare function scan<T, R>(arr: T[], accumulator: (acc: R, value: T, index: number) => R, initial: R): R[];
declare function buffer<T>(arr: T[], count: number, step?: number): T[][];
declare function flatMap<T, R>(arr: T[], project: (value: T, index: number) => R[]): R[];
declare function skip<T>(arr: T[], count: number): T[];
declare function skipLast<T>(arr: T[], count: number): T[];
declare function take<T>(arr: T[], count: number): T[];
declare function takeLast<T>(arr: T[], count: number): T[];
declare function filter<T>(arr: T[], predicate: (value: T, index: number) => boolean): T[];
declare function reverse<T>(arr: T[]): T[];
declare function sort<T>(arr: T[], comparator: Comparator<T>): T[];
declare function distinct<T>(arr: T[]): T[];
declare function partition<T>(arr: T[], size: number): T[][];
declare function reduce<T>(arr: T[], accumulator: (acc: T, value: T, index: number) => T): T | undefined;
declare function reduce<T>(arr: T[], accumulator: (acc: T, value: T, index: number) => T, initial: T): T;
declare function first<T>(arr: T[]): T | undefined;
declare function first<T>(arr: T[], defaultValue: T): T;
declare function last<T>(arr: T[]): T | undefined;
declare function last<T>(arr: T[], defaultValue: T): T;
declare function max<T>(arr: T[], comparator: Comparator<T>): T | undefined;
declare function min<T>(arr: T[], comparator: Comparator<T>): T | undefined;
declare function has<T>(arr: T[], value: T): boolean;
declare function elementsEqual<T>(arr1: T[], arr2: T[]): boolean;
declare function shallowEquals<T>(arr1: T[], arr2: T[]): boolean;
declare function fill<T>(arr: T[], item: T, start?: number, end?: number): T[];
declare function push<T>(arr: T[], ...items: T[]): T[];
declare function pop<T>(arr: T[], size?: number): T[];
declare function unshift<T>(arr: T[], ...items: T[]): T[];
declare function shift<T>(arr: T[], size?: number): T[];
declare function slice<T>(arr: T[], start?: number, end?: number): T[];
declare function splice<T>(arr: T[], start: number, deleteCount?: number): T[];
declare function splice<T>(arr: T[], start: number, deleteCount: number, ...items: T[]): T[];
declare const _default: {
    empty: typeof empty;
    from: typeof from;
    range: typeof range;
    repeat: typeof repeat;
    concat: typeof concat;
    zip: typeof zip;
    union: typeof union;
    intersection: typeof intersection;
    difference: typeof difference;
    symmetricDifference: typeof symmetricDifference;
    map: typeof map;
    pairwise: typeof pairwise;
    scan: typeof scan;
    buffer: typeof buffer;
    flatMap: typeof flatMap;
    skip: typeof skip;
    skipLast: typeof skipLast;
    take: typeof take;
    takeLast: typeof takeLast;
    filter: typeof filter;
    reverse: typeof reverse;
    sort: typeof sort;
    distinct: typeof distinct;
    partition: typeof partition;
    reduce: typeof reduce;
    first: typeof first;
    last: typeof last;
    max: typeof max;
    min: typeof min;
    has: typeof has;
    elementsEqual: typeof elementsEqual;
    shallowEquals: typeof shallowEquals;
    fill: typeof fill;
    push: typeof push;
    pop: typeof pop;
    unshift: typeof unshift;
    shift: typeof shift;
    slice: typeof slice;
    splice: typeof splice;
};
export default _default;
