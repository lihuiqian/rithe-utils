import Comparator from "../base/Comparator";
declare function empty<T>(): Set<T>;
declare function from<T>(iterable: Iterable<T>): Set<T>;
declare function range(start: number, count: number, step?: number): Set<number>;
declare function concat<T>(...sets: Set<T>[]): Set<T>;
declare function union<T>(set1: Set<T>, set2: Set<T>): Set<T>;
declare function intersection<T>(set1: Set<T>, set2: Set<T>): Set<T>;
declare function difference<T>(set1: Set<T>, set2: Set<T>): Set<T>;
declare function symmetricDifference<T>(set1: Set<T>, set2: Set<T>): Set<T>;
declare function map<T, R>(set: Set<T>, project: (value: T) => R): Set<R>;
declare function flatMap<T, R>(set: Set<T>, project: (value: T) => R[]): Set<R>;
declare function filter<T>(set: Set<T>, predicate: (value: T) => boolean): Set<T>;
declare function partition<T>(set: Set<T>, size: number): Set<T>[];
declare function first<T>(set: Set<T>): T | undefined;
declare function first<T>(set: Set<T>, defaultValue: T): T;
declare function max<T>(set: Set<T>, comparator: Comparator<T>): T | undefined;
declare function min<T>(set: Set<T>, comparator: Comparator<T>): T | undefined;
declare function elementsEqual<T>(set1: Set<T>, set2: Set<T>): boolean;
declare function add<T>(set: Set<T>, ...items: T[]): Set<T>;
declare function delete_<T>(set: Set<T>, ...items: T[]): Set<T>;
declare const _default: {
    empty: typeof empty;
    from: typeof from;
    range: typeof range;
    concat: typeof concat;
    union: typeof union;
    intersection: typeof intersection;
    difference: typeof difference;
    symmetricDifference: typeof symmetricDifference;
    map: typeof map;
    flatMap: typeof flatMap;
    filter: typeof filter;
    partition: typeof partition;
    first: typeof first;
    max: typeof max;
    min: typeof min;
    elementsEqual: typeof elementsEqual;
    add: typeof add;
    delete: typeof delete_;
};
export default _default;
