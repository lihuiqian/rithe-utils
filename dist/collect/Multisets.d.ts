import Comparator from "../base/Comparator";
import Multimap from "./Multimap";
import Multiset from "./Multiset";
declare function empty(): Multiset<unknown>;
declare function from<T>(iterable: Iterable<T>): Multiset<T>;
declare function resultFrom<T>(map: Map<T, number>): Multiset<T>;
declare function countFrom<T>(multimap: Multimap<T, unknown>): Multiset<T>;
declare function range(start: number, count: number, step?: number): Multiset<number>;
declare function concat<T>(...multisets: Multiset<T>[]): Multiset<T>;
declare function union<T>(multiset1: Multiset<T>, multiset2: Multiset<T>): Multiset<T>;
declare function intersection<T>(multiset1: Multiset<T>, multiset2: Multiset<T>): Multiset<T>;
declare function difference<T>(multiset1: Multiset<T>, multiset2: Multiset<T>): Multiset<T>;
declare function symmetricDifference<T>(multiset1: Multiset<T>, multiset2: Multiset<T>): Multiset<T>;
declare function retainOccurrences<T>(multiset1: Multiset<T>, multiset2: Multiset<T>): Multiset<T>;
declare function map<T, R>(multiset: Multiset<T>, project: (value: T) => R): Multiset<R>;
declare function flatMap<T, R>(multiset: Multiset<T>, project: (value: T) => R[]): Multiset<R>;
declare function filter<T>(multiset: Multiset<T>, predicate: (value: T) => boolean): Multiset<T>;
declare function filterEntries<T>(multiset: Multiset<T>, predicate: (value: T, count: number) => boolean): Multiset<T>;
declare function sortByCount<T>(multiset: Multiset<T>, comparator: Comparator<number>): Multiset<T>;
declare function distinct<T>(multiset: Multiset<T>): Multiset<T>;
declare function partition<T>(multiset: Multiset<T>, size: number): Multiset<T>[];
declare function first<T>(multiset: Multiset<T>): T | undefined;
declare function first<T>(multiset: Multiset<T>, defaultValue: T): T;
declare function max<T>(multiset: Multiset<T>, comparator: Comparator<T>): T | undefined;
declare function min<T>(multiset: Multiset<T>, comparator: Comparator<T>): T | undefined;
declare function elementsEqual<T>(multiset1: Multiset<T>, multiset2: Multiset<T>): boolean;
declare function add<T>(multiset: Multiset<T>, ...items: T[]): Multiset<T>;
declare function delete_<T>(multiset: Multiset<T>, ...items: T[]): Multiset<T>;
declare function setCount<T>(multiset: Multiset<T>, item: T, count: number): Multiset<T>;
declare const _default: {
    empty: typeof empty;
    from: typeof from;
    resultFrom: typeof resultFrom;
    countFrom: typeof countFrom;
    range: typeof range;
    concat: typeof concat;
    union: typeof union;
    intersection: typeof intersection;
    difference: typeof difference;
    symmetricDifference: typeof symmetricDifference;
    retainOccurrences: typeof retainOccurrences;
    map: typeof map;
    flatMap: typeof flatMap;
    filter: typeof filter;
    filterEntries: typeof filterEntries;
    sortByCount: typeof sortByCount;
    distinct: typeof distinct;
    partition: typeof partition;
    first: typeof first;
    max: typeof max;
    min: typeof min;
    elementsEqual: typeof elementsEqual;
    add: typeof add;
    delete: typeof delete_;
    setCount: typeof setCount;
};
export default _default;
